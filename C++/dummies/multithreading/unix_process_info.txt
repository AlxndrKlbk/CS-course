"Процессы UNIX"

Процессы порождаются с помощью системного вызова fork(). Создается практически полная копия исходного процесса. Данный системный вызов возвращает PID потомка (в процессе родителя) или 0 (в процессе потомка). В случае ошибки может вернуть -1.

PID - идентификатор процесса (уникальный номер). Получить свой PID можно через getpid().

PPID (Parent PID) - идентификатор родителя. Получить его можно через getppid(). Помните, потомку fork() вернет 0!

Если мы хотим запустить программу на исполнения, то мы должны породить процесс (через fork()) и "переключить" его на другой исполняемый файл с помощью функций семейства exec.
int execl(const char *path, const char *arg0, ..., const char *argn, (char *)0);
int execle(const char *path, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);
int execlp(const char *file, const char *arg0, ..., const char *argn, (char *)0);
int execlpe(const char *file, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);
int execv(const char *path, char *const argv[]);
int execve(const char *path, char *const argv[], char *const envp[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[], char *const envp[]);

суффиксы после exec:
(l - list) Это значит, что аргументы командной строки передаются в виде списка переменной длины (оканчивающегося NULL).
(v - vector) Это значит, что аргументы командной строки передаются в виде указателя на массив строк (последний элемент массива - NULL).
(p - path) Мы не указываем полный путь к имени файла. Файл ищется с учетом переменной окружения PATH и т.д.
(e - environment) Мы передаем явно переменные окружения в виде массива строк "key=value".

Переменные окружения можно посмотреть, добавив в программу:

extern char **environ;


Также есть функции getenv(...), putenv(...), setenv(...), unsetenv(...).

Процессы можно порождать с помощью функции

int system(const char *string);

 
По сути это fork+exec для /bin/sh -c string в одном флаконе.

Реальные идентификаторы пользователя и группы можно получить через вызовы getuid() и getgid().
Эффективные - через вызовы geteuid() и getegid().

Корневой каталог меняется через int chroot(const char *path), рабочий каталог через int chdir(const char *path).

Изменение приоритета делается через функцию int nice(int incr). Если процесс исполняется не от root, то он может только понизить приоритет. Для этого в nice передается положительное число - на сколько понижаем. Если процесс исполняется от root, то мы имеем возможность повысить приоритет через передачу в nice отрицательного значения. Сам приоритет находится в диапазоне от 0 до 39, однако nice возвращает значение N-20, где N - приоритет.
